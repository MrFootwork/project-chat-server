// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String   @unique
  password  String
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  Messages Message[]
  Roles    RoomConfig[]
}

model Room {
  id           String   @id @default(cuid())
  name         String
  private      Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  UsersHistory String[]

  // Relations
  Messages Message[]
  Users    RoomConfig[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  edited    Boolean  @default(false)
  userId    String
  roomId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  User User @relation(fields: [userId], references: [id])
  Room Room @relation(fields: [roomId], references: [id])
}

// // Join table for Admins
model RoomConfig {
  id      String  @id @default(cuid())
  userId  String
  roomId  String
  isAdmin Boolean @default(false)

  User User @relation(fields: [userId], references: [id])
  Room Room @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId]) // Ensure a user can only participate in a room once
}
